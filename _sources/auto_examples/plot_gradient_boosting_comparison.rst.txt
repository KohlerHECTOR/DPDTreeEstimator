
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_gradient_boosting_comparison.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_gradient_boosting_comparison.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_gradient_boosting_comparison.py:


=====================================
Multi-class Gradient Boosting Trees
=====================================
We compare gradient boosting with DPDT against
gradient boosting with CART.

.. GENERATED FROM PYTHON SOURCE LINES 8-105



.. image-sg:: /auto_examples/images/sphx_glr_plot_gradient_boosting_comparison_001.png
   :alt: Convergence of GB-DPDT algorithm
   :srcset: /auto_examples/images/sphx_glr_plot_gradient_boosting_comparison_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    DecisionTreeClassifier's misclassification_error: 0.418
    DPDTreeClassifier's misclassification_error: 0.418






|

.. code-block:: Python

    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from sklearn.dummy import DummyClassifier
    from sklearn.metrics import accuracy_score
    from sklearn.tree import DecisionTreeClassifier

    from dpdt import DPDTreeClassifier, GradientBoostingDPDTClassifier

    X_train = np.load(
        "eye_movements_data/eye_movements_seed_0_x_train.npy", allow_pickle=True
    )
    y_train = np.load(
        "eye_movements_data/eye_movements_seed_0_y_train.npy", allow_pickle=True
    )
    X_test = np.load(
        "eye_movements_data/eye_movements_seed_0_x_test.npy", allow_pickle=True
    )
    y_test = np.load(
        "eye_movements_data/eye_movements_seed_0_y_test.npy", allow_pickle=True
    )

    n_estimators = 50
    weak_cart = DecisionTreeClassifier(max_depth=3, random_state=42)
    weak_dpdt = DPDTreeClassifier(max_depth=3)
    gb_dpdt = GradientBoostingDPDTClassifier(n_estimators=n_estimators, n_jobs="best")
    gb_cart = GradientBoostingDPDTClassifier(
        n_estimators=n_estimators, n_jobs="best", use_default_dt=True
    )

    gb_dpdt.fit(X_train, y_train)
    gb_cart.fit(X_train, y_train)


    dummy_clf = DummyClassifier()


    def misclassification_error(y_true, y_pred):
        return 1 - accuracy_score(y_true, y_pred)


    weak_carts_misclassification_error = misclassification_error(
        y_test, weak_cart.fit(X_train, y_train).predict(X_test)
    )

    weak_dpdts_misclassification_error = misclassification_error(
        y_test, weak_dpdt.fit(X_train, y_train).predict(X_test)
    )

    print(
        "DecisionTreeClassifier's misclassification_error: "
        f"{weak_carts_misclassification_error:.3f}"
    )

    print(
        "DPDTreeClassifier's misclassification_error: "
        f"{weak_dpdts_misclassification_error:.3f}"
    )

    boosting_errors_dpdt = pd.DataFrame(
        {
            "Number of trees": range(1, gb_dpdt.n_estimators + 1),
            "GB-DPDT": [
                misclassification_error(y_test, y_pred)
                for y_pred in gb_dpdt.staged_predict(X_test)
            ],
        }
    ).set_index("Number of trees")
    ax = boosting_errors_dpdt.plot()
    ax.set_ylabel("Misclassification error on test set")
    ax.set_title("Convergence of GB-DPDT algorithm")


    plt.plot(
        range(1, gb_cart.n_estimators + 1),
        [
            misclassification_error(y_test, y_pred)
            for y_pred in gb_cart.staged_predict(X_test)
        ],
    )

    plt.plot(
        [boosting_errors_dpdt.index.min(), boosting_errors_dpdt.index.max()],
        [weak_carts_misclassification_error, weak_carts_misclassification_error],
        color="tab:orange",
        linestyle="dotted",
    )

    plt.plot(
        [boosting_errors_dpdt.index.min(), boosting_errors_dpdt.index.max()],
        [weak_dpdts_misclassification_error, weak_dpdts_misclassification_error],
        color="tab:blue",
        linestyle="dashed",
    )

    plt.legend(["GB-DPDT", "GB-CART", "DecisionTreeClassifier", "DPDTreeClassifier"], loc=1)
    plt.savefig("gb_boosting_eye_movements")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 38.540 seconds)


.. _sphx_glr_download_auto_examples_plot_gradient_boosting_comparison.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gradient_boosting_comparison.ipynb <plot_gradient_boosting_comparison.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gradient_boosting_comparison.py <plot_gradient_boosting_comparison.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
